/*


There are two almost identical ways to access characters in a string. The easier to use and faster version is the overloaded operator[]:

char& string::operator[] (size_type nIndex)
const char& string::operator[] (size_type nIndex) const

- Both of these functions return the character with index nIndex
- Passing an invalid index results in undefined behavior
- Using length() as the index is valid for const strings only, and returns the value generated by the stringâ€™s default constructor. It is not recommended that you do this.
- Because char& is the return type, you can use this to edit characters in the array



*/
#include <string>
#include <iostream>


int main(){


	std::string sSource("abcdefg");
	std::cout << sSource[5] << std::endl;
	sSource[5] = 'X';
	std::cout << sSource << std::endl;


/*

There is also a non-operator version. This version is slower since it uses exceptions to check if the nIndex is valid. If you are not sure whether nIndex is valid, you should use this version to access the array:


Both of these functions return the character with index nIndex
Passing an invalid index results in an out_of_range exception
Because char& is the return type, you can use this to edit characters in the array


*/


	



	std::string sSource("abcdefg");
	std::cout << sSource.at(5) << std::endl;
	sSource.at(5) = 'X';
	std::cout << sSource << std::endl;



}
